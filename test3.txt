#5
наследование - это механизм наследования новых классов из существующих. Наследование позволяет программистам создавать классы, основанные на существующих классах, и это позволяет классу, созданному посредством наследования, наследовать атрибуты и методы родительского класса. Это означает, что наследование поддерживает возможность повторного использования кода. Методы или, вообще говоря, программное обеспечение, унаследованное подклассом, считается повторно используемым в подклассе. Отношения объектов или классов посредством наследования порождают ориентированный граф.


#6
Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным). Инкапсуляция делает некоторые из компонент доступными только внутри класса.
Модификаторы доступа в Python используются для модификации видимости переменных по умолчанию. 
Есть 3 типа модификаторов доступов:
публичный — public;
приватный — private;
защищенный — protected.
Доступ к переменным с модификаторами публичного доступа открыт из любой точки вне класса, доступ к приватным переменным открыт только внутри класса, и в случае с защищенными переменными, доступ открыт только внутри того же пакета.

#7
Полиморфизм - разное поведение одного и того же метода в разных классах. Например, мы можем сложить два числа, и можем сложить две строки. При этом получим разный результат, так как числа и строки являются разными классами. Это относится к использованию сущности одного типа (метода, оператора или объекта) для представления разных типов в разных сценариях.

#8
Абстракция - метод решения задачи, при котором объекты разного рода объединяются общим понятием (концепцией), а затем сгруппированные сущности рассматриваются как элементы единой категории. Например, люди не думают об автомобиле как о совокупности тысяч отдельных деталей. Вместо этого они видят в нем четко определенный объект со своим уникальным поведением. Эта абстракция позволяет людям управлять автомобилем, не зная о сложности деталей, из которых он состоит. Они могут игнорировать детали того, как работает трансмиссия двигателя и тормозные системы. Вместо этого они могут использовать объект в целом.
Мощный способ управления абстракцией - использование иерархической классификации. Это позволяет нам наслоить семантику сложных систем, разбивая их на более управляемые части. Снаружи автомобиль представляет собой единый объект. Оказавшись внутри, вы видите, что автомобиль состоит из нескольких подсистем: рулевого управления, тормозов, аудиосистемы, ремней безопасности и т. Д. В свою очередь, каждая из этих подсистем состоит из более мелких блоков.
 
#15
Мы можем видеть эту разницу, потому что при создании списка Python резервирует память для всего списка и вычисляет ее на месте. В случае генератора мы получаем только «алгоритм» / «инструкции», как рассчитать, что хранит Python. И каждый раз, когда мы вызываем генератор, он только «генерирует» следующий элемент последовательности по запросу в соответствии с «инструкциями». С другой стороны, генератор будет медленнее, так как каждый раз, когда элемент последовательности вычисляется и возвращается, контекст / состояние функции должны сохраняться, чтобы их можно было использовать в следующий раз для генерации следующего значения. Это «сохранение и загрузка контекста / состояния функции» требует времени.
